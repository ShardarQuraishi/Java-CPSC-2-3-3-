Team Assignment 6
Due Date: Friday, July 27 7:00 PM (no late submissions accepted)

For this team assignment, continue with the code you created for assignment 4 which contains the BankAccount and Customer classes.  Add the class ChequingAccount.  The three classes should have the following design:

Class diagram for Assignment 6

Additional details:

The instance variable overdraftAmount should be moved from BankAccount to ChequingAccount.  The withdraw method in BankAccount should ensure the balance is never below zero.
The method transfer in BankAccount should transfer specified amount from the account the method is invoked on to the account provided as an argument.  The method should do this by invoking the withdraw and deposit methods.
The method setBalance in BankAccount should have protected access so child classes can access it.  It should do not do any error checking (and it should allow a negative balance.)
ChequingAccount overrides the withdraw method such that it allows an overdraft of at most overdraftAmount.  (The balance is allowed to be negative.)  If the withdraw results in an overdraft (the balance in the account is negative), the customer should be charged the overdraftFee.  (The charge is done by reducing the account balance by the overdraftFee amount.)
Provide a trace of the following code:

Customer c = new Customer("John Doe", 321);
BankAccount b1 = new BankAccount(c,100.0);
ChequingAccount b2 = new ChequingAccount(c, 200.0, 12.0);
b2.setOverdraftAmount(150.0);
BankAccount b3 = b2;

System.out.println(b1.getBalance() + ", " + b3.getBalance());

b1.withdraw(110);
System.out.println(b1.getBalance() + ", " + b3.getBalance());

b2.withdraw(300.0);
System.out.println(b1.getBalance() + ", " + b3.getBalance());

b1.transfer(50.0, b2);
System.out.println(b1.getBalance() + ", " + b3.getBalance());

b2.transfer(88,b1);
System.out.println(b1.getBalance() + ", " + b3.getBalance());
In your trace, clearly show the objects that are created, which variables are referencing which objects and the data stored in each object.  Also indicate for each call of the withdraw method which version of withdraw is invoked, the one in BankAccount or the one in ChequingAccount or both.  (If both, indicate in which order they are invoked.)  You can make a video of walking through the trace.  Or you can do another approach.  It should be clear, for each statement, which objects are created and modified.  Make sure you also show the result of the six print statements.  It should be clear from your trace why those values are printed
